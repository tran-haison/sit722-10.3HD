name: Backend CI - Test, Build and Push Images to ACR

on:
  push:
    branches:
      - testing
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

jobs:
  # Job 1: Test and lint backends
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      # Product DB
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      
      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      # Step 4: Run product_service tests
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q
      
      # Step 5: Run order_service tests
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      # Step 6: Run customer_service tests
      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  # Job 2: Build and push images to ACR
  build_and_push_backend_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Azure login using a Service Principal secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Login to Azure Container Registry
      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      # Step 4: Build Docker images for Backend services
      - name: Build Backend service images
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/

      # Step 5: Push Docker images for Backend services
      - name: Push Backend service images to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:latest

      # Step 6: Logout from Azure for security (runs even if image push fails)
      - name: Logout from Azure
        run: az logout
        if: always()
